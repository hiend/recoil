var search_data = {
    'index': {
        'searchIndex': ["recoil","recoil\\channel","recoil\\channel\\exception","recoil\\channel\\serialization","recoil\\coroutine","recoil\\coroutine\\exception","recoil\\kernel","recoil\\kernel\\api","recoil\\kernel\\exception","recoil\\kernel\\strand","recoil\\stream","recoil\\stream\\exception","recoil\\channel\\bidirectionalchanneladaptor","recoil\\channel\\bidirectionalchannelinterface","recoil\\channel\\channel","recoil\\channel\\exception\\channelclosedexception","recoil\\channel\\exception\\channellockedexception","recoil\\channel\\readablechannelinterface","recoil\\channel\\readablestreamchannel","recoil\\channel\\serialization\\phpserializer","recoil\\channel\\serialization\\phpunserializer","recoil\\channel\\serialization\\serializerinterface","recoil\\channel\\serialization\\unserializerinterface","recoil\\channel\\writablechannelinterface","recoil\\channel\\writablestreamchannel","recoil\\coroutine\\coroutineadaptor","recoil\\coroutine\\coroutineadaptorinterface","recoil\\coroutine\\coroutineinterface","recoil\\coroutine\\coroutineproviderinterface","recoil\\coroutine\\exception\\promiserejectedexception","recoil\\coroutine\\generatorcoroutine","recoil\\coroutine\\promisecoroutine","recoil\\kernel\\api\\kernelapi","recoil\\kernel\\api\\kernelapicall","recoil\\kernel\\api\\kernelapiinterface","recoil\\kernel\\api\\select","recoil\\kernel\\api\\sleep","recoil\\kernel\\api\\timeout","recoil\\kernel\\api\\waitall","recoil\\kernel\\exception\\strandterminatedexception","recoil\\kernel\\exception\\timeoutexception","recoil\\kernel\\kernel","recoil\\kernel\\kernelinterface","recoil\\kernel\\strand\\stackbase","recoil\\kernel\\strand\\strand","recoil\\kernel\\strand\\strandfactory","recoil\\kernel\\strand\\strandfactoryinterface","recoil\\kernel\\strand\\strandinterface","recoil\\packageinfo","recoil\\recoil","recoil\\stream\\bidirectionalstreamadaptor","recoil\\stream\\bidirectionalstreaminterface","recoil\\stream\\exception\\streamclosedexception","recoil\\stream\\exception\\streamlockedexception","recoil\\stream\\exception\\streamreadexception","recoil\\stream\\exception\\streamwriteexception","recoil\\stream\\readablereactstream","recoil\\stream\\readablestream","recoil\\stream\\readablestreaminterface","recoil\\stream\\writablereactstream","recoil\\stream\\writablestream","recoil\\stream\\writablestreaminterface","recoil\\channel\\bidirectionalchanneladaptor::__construct","recoil\\channel\\bidirectionalchanneladaptor::read","recoil\\channel\\bidirectionalchanneladaptor::write","recoil\\channel\\bidirectionalchanneladaptor::close","recoil\\channel\\bidirectionalchanneladaptor::isclosed","recoil\\channel\\channel::__construct","recoil\\channel\\channel::read","recoil\\channel\\channel::write","recoil\\channel\\channel::close","recoil\\channel\\channel::isclosed","recoil\\channel\\exception\\channelclosedexception::__construct","recoil\\channel\\exception\\channellockedexception::__construct","recoil\\channel\\readablechannelinterface::read","recoil\\channel\\readablechannelinterface::close","recoil\\channel\\readablechannelinterface::isclosed","recoil\\channel\\readablestreamchannel::__construct","recoil\\channel\\readablestreamchannel::read","recoil\\channel\\readablestreamchannel::close","recoil\\channel\\readablestreamchannel::isclosed","recoil\\channel\\serialization\\phpserializer::serialize","recoil\\channel\\serialization\\phpunserializer::__construct","recoil\\channel\\serialization\\phpunserializer::feed","recoil\\channel\\serialization\\phpunserializer::hasvalue","recoil\\channel\\serialization\\phpunserializer::unserialize","recoil\\channel\\serialization\\phpunserializer::finalize","recoil\\channel\\serialization\\serializerinterface::serialize","recoil\\channel\\serialization\\unserializerinterface::feed","recoil\\channel\\serialization\\unserializerinterface::hasvalue","recoil\\channel\\serialization\\unserializerinterface::unserialize","recoil\\channel\\serialization\\unserializerinterface::finalize","recoil\\channel\\writablechannelinterface::write","recoil\\channel\\writablechannelinterface::close","recoil\\channel\\writablechannelinterface::isclosed","recoil\\channel\\writablestreamchannel::__construct","recoil\\channel\\writablestreamchannel::write","recoil\\channel\\writablestreamchannel::close","recoil\\channel\\writablestreamchannel::isclosed","recoil\\coroutine\\coroutineadaptor::adapt","recoil\\coroutine\\coroutineadaptorinterface::adapt","recoil\\coroutine\\coroutineinterface::call","recoil\\coroutine\\coroutineinterface::resumewithvalue","recoil\\coroutine\\coroutineinterface::resumewithexception","recoil\\coroutine\\coroutineinterface::terminate","recoil\\coroutine\\coroutineinterface::finalize","recoil\\coroutine\\coroutineproviderinterface::coroutine","recoil\\coroutine\\exception\\promiserejectedexception::__construct","recoil\\coroutine\\exception\\promiserejectedexception::reason","recoil\\coroutine\\generatorcoroutine::__construct","recoil\\coroutine\\generatorcoroutine::call","recoil\\coroutine\\generatorcoroutine::resumewithvalue","recoil\\coroutine\\generatorcoroutine::resumewithexception","recoil\\coroutine\\generatorcoroutine::finalize","recoil\\coroutine\\generatorcoroutine::registerfinalizecallback","recoil\\coroutine\\promisecoroutine::__construct","recoil\\coroutine\\promisecoroutine::call","recoil\\coroutine\\promisecoroutine::terminate","recoil\\coroutine\\promisecoroutine::finalize","recoil\\kernel\\api\\kernelapi::strand","recoil\\kernel\\api\\kernelapi::kernel","recoil\\kernel\\api\\kernelapi::eventloop","recoil\\kernel\\api\\kernelapi::return_","recoil\\kernel\\api\\kernelapi::throw_","recoil\\kernel\\api\\kernelapi::finally_","recoil\\kernel\\api\\kernelapi::terminate","recoil\\kernel\\api\\kernelapi::sleep","recoil\\kernel\\api\\kernelapi::suspend","recoil\\kernel\\api\\kernelapi::timeout","recoil\\kernel\\api\\kernelapi::all","recoil\\kernel\\api\\kernelapi::cooperate","recoil\\kernel\\api\\kernelapi::noop","recoil\\kernel\\api\\kernelapi::execute","recoil\\kernel\\api\\kernelapi::select","recoil\\kernel\\api\\kernelapi::stop","recoil\\kernel\\api\\kernelapicall::__construct","recoil\\kernel\\api\\kernelapicall::name","recoil\\kernel\\api\\kernelapicall::arguments","recoil\\kernel\\api\\kernelapicall::call","recoil\\kernel\\api\\kernelapiinterface::strand","recoil\\kernel\\api\\kernelapiinterface::kernel","recoil\\kernel\\api\\kernelapiinterface::eventloop","recoil\\kernel\\api\\kernelapiinterface::return_","recoil\\kernel\\api\\kernelapiinterface::throw_","recoil\\kernel\\api\\kernelapiinterface::finally_","recoil\\kernel\\api\\kernelapiinterface::terminate","recoil\\kernel\\api\\kernelapiinterface::sleep","recoil\\kernel\\api\\kernelapiinterface::suspend","recoil\\kernel\\api\\kernelapiinterface::timeout","recoil\\kernel\\api\\kernelapiinterface::all","recoil\\kernel\\api\\kernelapiinterface::noop","recoil\\kernel\\api\\kernelapiinterface::cooperate","recoil\\kernel\\api\\kernelapiinterface::execute","recoil\\kernel\\api\\kernelapiinterface::select","recoil\\kernel\\api\\kernelapiinterface::stop","recoil\\kernel\\api\\select::__construct","recoil\\kernel\\api\\select::call","recoil\\kernel\\api\\select::finalize","recoil\\kernel\\api\\select::onstrandexit","recoil\\kernel\\api\\sleep::__construct","recoil\\kernel\\api\\sleep::call","recoil\\kernel\\api\\sleep::finalize","recoil\\kernel\\api\\timeout::__construct","recoil\\kernel\\api\\timeout::call","recoil\\kernel\\api\\timeout::terminate","recoil\\kernel\\api\\timeout::finalize","recoil\\kernel\\api\\waitall::__construct","recoil\\kernel\\api\\waitall::call","recoil\\kernel\\api\\waitall::finalize","recoil\\kernel\\exception\\strandterminatedexception::__construct","recoil\\kernel\\exception\\timeoutexception::__construct","recoil\\kernel\\kernel::__construct","recoil\\kernel\\kernel::execute","recoil\\kernel\\kernel::attachstrand","recoil\\kernel\\kernel::detachstrand","recoil\\kernel\\kernel::api","recoil\\kernel\\kernel::coroutineadaptor","recoil\\kernel\\kernel::strandfactory","recoil\\kernel\\kernel::eventloop","recoil\\kernel\\kernel::stop","recoil\\kernel\\kernel::ontick","recoil\\kernel\\kernelinterface::execute","recoil\\kernel\\kernelinterface::attachstrand","recoil\\kernel\\kernelinterface::detachstrand","recoil\\kernel\\kernelinterface::api","recoil\\kernel\\kernelinterface::coroutineadaptor","recoil\\kernel\\kernelinterface::strandfactory","recoil\\kernel\\kernelinterface::eventloop","recoil\\kernel\\kernelinterface::stop","recoil\\kernel\\strand\\stackbase::call","recoil\\kernel\\strand\\stackbase::resumewithvalue","recoil\\kernel\\strand\\stackbase::resumewithexception","recoil\\kernel\\strand\\stackbase::terminate","recoil\\kernel\\strand\\strand::__construct","recoil\\kernel\\strand\\strand::kernel","recoil\\kernel\\strand\\strand::current","recoil\\kernel\\strand\\strand::push","recoil\\kernel\\strand\\strand::pop","recoil\\kernel\\strand\\strand::call","recoil\\kernel\\strand\\strand::returnvalue","recoil\\kernel\\strand\\strand::throwexception","recoil\\kernel\\strand\\strand::suspend","recoil\\kernel\\strand\\strand::resumewithvalue","recoil\\kernel\\strand\\strand::resumewithexception","recoil\\kernel\\strand\\strand::terminate","recoil\\kernel\\strand\\strand::hasexited","recoil\\kernel\\strand\\strand::tick","recoil\\kernel\\strand\\strandfactory::createstrand","recoil\\kernel\\strand\\strandfactoryinterface::createstrand","recoil\\kernel\\strand\\strandinterface::kernel","recoil\\kernel\\strand\\strandinterface::current","recoil\\kernel\\strand\\strandinterface::push","recoil\\kernel\\strand\\strandinterface::pop","recoil\\kernel\\strand\\strandinterface::call","recoil\\kernel\\strand\\strandinterface::returnvalue","recoil\\kernel\\strand\\strandinterface::throwexception","recoil\\kernel\\strand\\strandinterface::suspend","recoil\\kernel\\strand\\strandinterface::resumewithvalue","recoil\\kernel\\strand\\strandinterface::resumewithexception","recoil\\kernel\\strand\\strandinterface::terminate","recoil\\kernel\\strand\\strandinterface::hasexited","recoil\\kernel\\strand\\strandinterface::tick","recoil\\recoil::__callstatic","recoil\\recoil::run","recoil\\recoil::strand","recoil\\recoil::kernel","recoil\\recoil::eventloop","recoil\\recoil::return_","recoil\\recoil::throw_","recoil\\recoil::finally_","recoil\\recoil::terminate","recoil\\recoil::sleep","recoil\\recoil::suspend","recoil\\recoil::timeout","recoil\\recoil::all","recoil\\recoil::noop","recoil\\recoil::cooperate","recoil\\recoil::execute","recoil\\recoil::select","recoil\\recoil::stop","recoil\\stream\\bidirectionalstreamadaptor::__construct","recoil\\stream\\bidirectionalstreamadaptor::read","recoil\\stream\\bidirectionalstreamadaptor::write","recoil\\stream\\bidirectionalstreamadaptor::writeall","recoil\\stream\\bidirectionalstreamadaptor::close","recoil\\stream\\bidirectionalstreamadaptor::isclosed","recoil\\stream\\exception\\streamclosedexception::__construct","recoil\\stream\\exception\\streamlockedexception::__construct","recoil\\stream\\exception\\streamreadexception::__construct","recoil\\stream\\exception\\streamwriteexception::__construct","recoil\\stream\\readablereactstream::__construct","recoil\\stream\\readablereactstream::read","recoil\\stream\\readablereactstream::close","recoil\\stream\\readablereactstream::isclosed","recoil\\stream\\readablereactstream::onstreamdata","recoil\\stream\\readablereactstream::onstreamend","recoil\\stream\\readablereactstream::onstreamclose","recoil\\stream\\readablereactstream::onstreamerror","recoil\\stream\\readablestream::__construct","recoil\\stream\\readablestream::read","recoil\\stream\\readablestream::close","recoil\\stream\\readablestream::isclosed","recoil\\stream\\readablestreaminterface::read","recoil\\stream\\readablestreaminterface::close","recoil\\stream\\readablestreaminterface::isclosed","recoil\\stream\\writablereactstream::__construct","recoil\\stream\\writablereactstream::write","recoil\\stream\\writablereactstream::writeall","recoil\\stream\\writablereactstream::close","recoil\\stream\\writablereactstream::isclosed","recoil\\stream\\writablereactstream::onstreamdrain","recoil\\stream\\writablereactstream::onstreamerror","recoil\\stream\\writablestream::__construct","recoil\\stream\\writablestream::write","recoil\\stream\\writablestream::writeall","recoil\\stream\\writablestream::close","recoil\\stream\\writablestream::isclosed","recoil\\stream\\writablestreaminterface::write","recoil\\stream\\writablestreaminterface::writeall","recoil\\stream\\writablestreaminterface::close","recoil\\stream\\writablestreaminterface::isclosed"],
        'info': [["Recoil","","Recoil.html","","",3],["Recoil\\Channel","","Recoil\/Channel.html","","",3],["Recoil\\Channel\\Exception","","Recoil\/Channel\/Exception.html","","",3],["Recoil\\Channel\\Serialization","","Recoil\/Channel\/Serialization.html","","",3],["Recoil\\Coroutine","","Recoil\/Coroutine.html","","",3],["Recoil\\Coroutine\\Exception","","Recoil\/Coroutine\/Exception.html","","",3],["Recoil\\Kernel","","Recoil\/Kernel.html","","",3],["Recoil\\Kernel\\Api","","Recoil\/Kernel\/Api.html","","",3],["Recoil\\Kernel\\Exception","","Recoil\/Kernel\/Exception.html","","",3],["Recoil\\Kernel\\Strand","","Recoil\/Kernel\/Strand.html","","",3],["Recoil\\Stream","","Recoil\/Stream.html","","",3],["Recoil\\Stream\\Exception","","Recoil\/Stream\/Exception.html","","",3],["BidirectionalChannelAdaptor","Recoil\\Channel","Recoil\/Channel\/BidirectionalChannelAdaptor.html","","Adapts separate read\/write channels into a bidirectional",1],["BidirectionalChannelInterface","Recoil\\Channel","Recoil\/Channel\/BidirectionalChannelInterface.html","","A data-channel that supports bidirectional communication.",1],["Channel","Recoil\\Channel","Recoil\/Channel\/Channel.html","","An unbuffered (synchronous) loop-back data channel",1],["ChannelClosedException","Recoil\\Channel\\Exception","Recoil\/Channel\/Exception\/ChannelClosedException.html"," < Exception","A read or write operation was attempted on a channel",1],["ChannelLockedException","Recoil\\Channel\\Exception","Recoil\/Channel\/Exception\/ChannelLockedException.html"," < Exception","A read or write operation was attempted on a channel",1],["ReadableChannelInterface","Recoil\\Channel","Recoil\/Channel\/ReadableChannelInterface.html","","Interface and specification for coroutine based readable",1],["ReadableStreamChannel","Recoil\\Channel","Recoil\/Channel\/ReadableStreamChannel.html","","A readable channel that unserializes values from a",1],["PhpSerializer","Recoil\\Channel\\Serialization","Recoil\/Channel\/Serialization\/PhpSerializer.html","","A serializer that uses the built-in PHP serialization",1],["PhpUnserializer","Recoil\\Channel\\Serialization","Recoil\/Channel\/Serialization\/PhpUnserializer.html","","An unserializer that uses the built-in PHP serialization",1],["SerializerInterface","Recoil\\Channel\\Serialization","Recoil\/Channel\/Serialization\/SerializerInterface.html","","A mechanism for serializing PHP values on stream-based",1],["UnserializerInterface","Recoil\\Channel\\Serialization","Recoil\/Channel\/Serialization\/UnserializerInterface.html","","A mechanism for unserializing PHP values from stream-based",1],["WritableChannelInterface","Recoil\\Channel","Recoil\/Channel\/WritableChannelInterface.html","","Interface and specification for coroutine based writable",1],["WritableStreamChannel","Recoil\\Channel","Recoil\/Channel\/WritableStreamChannel.html","","A writable channel that serializes values onto a stream.",1],["CoroutineAdaptor","Recoil\\Coroutine","Recoil\/Coroutine\/CoroutineAdaptor.html","","The default coroutine adaptor implementation.",1],["CoroutineAdaptorInterface","Recoil\\Coroutine","Recoil\/Coroutine\/CoroutineAdaptorInterface.html","","Adapts arbitrary values into coroutine objects.",1],["CoroutineInterface","Recoil\\Coroutine","Recoil\/Coroutine\/CoroutineInterface.html","","A coroutine represents a unit of work that can be suspended",1],["CoroutineProviderInterface","Recoil\\Coroutine","Recoil\/Coroutine\/CoroutineProviderInterface.html","","A coroutine provide is an object that can produce an",1],["PromiseRejectedException","Recoil\\Coroutine\\Exception","Recoil\/Coroutine\/Exception\/PromiseRejectedException.html"," < Exception","Indicates that a promise was rejected.",1],["GeneratorCoroutine","Recoil\\Coroutine","Recoil\/Coroutine\/GeneratorCoroutine.html","","A coroutine wrapper for PHP generators.",1],["PromiseCoroutine","Recoil\\Coroutine","Recoil\/Coroutine\/PromiseCoroutine.html","","A coroutine that resumes when a promise is fulfilled",1],["KernelApi","Recoil\\Kernel\\Api","Recoil\/Kernel\/Api\/KernelApi.html","","The default kernel API implementation.",1],["KernelApiCall","Recoil\\Kernel\\Api","Recoil\/Kernel\/Api\/KernelApiCall.html","","Represents a call to a feature provided by the Kernel",1],["KernelApiInterface","Recoil\\Kernel\\Api","Recoil\/Kernel\/Api\/KernelApiInterface.html","","Public interface for manipulating the kernel and the",1],["Select","Recoil\\Kernel\\Api","Recoil\/Kernel\/Api\/Select.html","","Internal implementation of KernelApiInterface::select().",1],["Sleep","Recoil\\Kernel\\Api","Recoil\/Kernel\/Api\/Sleep.html","","Internal implementation of KernelApiInterface::sleep().",1],["Timeout","Recoil\\Kernel\\Api","Recoil\/Kernel\/Api\/Timeout.html","","Internal implementation of KernelApiInterface::timeout().",1],["WaitAll","Recoil\\Kernel\\Api","Recoil\/Kernel\/Api\/WaitAll.html","","Internal implementation of KernelApiInterface::all().",1],["StrandTerminatedException","Recoil\\Kernel\\Exception","Recoil\/Kernel\/Exception\/StrandTerminatedException.html"," < RuntimeException","Indicates that strand has been terminated.",1],["TimeoutException","Recoil\\Kernel\\Exception","Recoil\/Kernel\/Exception\/TimeoutException.html"," < RuntimeException","Indicates that a coroutine has timed out.",1],["Kernel","Recoil\\Kernel","Recoil\/Kernel\/Kernel.html","","The default kernel implementation.",1],["KernelInterface","Recoil\\Kernel","Recoil\/Kernel\/KernelInterface.html","","A coroutine kernel.",1],["StackBase","Recoil\\Kernel\\Strand","Recoil\/Kernel\/Strand\/StackBase.html","","The base coroutine in a strand's call-stack.",1],["Strand","Recoil\\Kernel\\Strand","Recoil\/Kernel\/Strand\/Strand.html"," < EventEmitter","A strand represents a user-space \"thread\" of execution.",1],["StrandFactory","Recoil\\Kernel\\Strand","Recoil\/Kernel\/Strand\/StrandFactory.html","","The default strand factory.",1],["StrandFactoryInterface","Recoil\\Kernel\\Strand","Recoil\/Kernel\/Strand\/StrandFactoryInterface.html","","A factory for strands.",1],["StrandInterface","Recoil\\Kernel\\Strand","Recoil\/Kernel\/Strand\/StrandInterface.html","","A strand represents a user-space \"thread\" of execution.",1],["PackageInfo","Recoil","Recoil\/PackageInfo.html","","",1],["Recoil","Recoil","Recoil\/Recoil.html","","Public facade for Kernel API calls.",1],["BidirectionalStreamAdaptor","Recoil\\Stream","Recoil\/Stream\/BidirectionalStreamAdaptor.html","","Adapts separate read\/write streams into a bidirectional",1],["BidirectionalStreamInterface","Recoil\\Stream","Recoil\/Stream\/BidirectionalStreamInterface.html","","A stream that supports bidirectional communication.",1],["StreamClosedException","Recoil\\Stream\\Exception","Recoil\/Stream\/Exception\/StreamClosedException.html"," < LogicException","Indicates that a read or write operation was attempted",1],["StreamLockedException","Recoil\\Stream\\Exception","Recoil\/Stream\/Exception\/StreamLockedException.html"," < LogicException","Indicates that multiple read or write operations were",1],["StreamReadException","Recoil\\Stream\\Exception","Recoil\/Stream\/Exception\/StreamReadException.html"," < RuntimeException","Indicates that an error occured while attempting to",1],["StreamWriteException","Recoil\\Stream\\Exception","Recoil\/Stream\/Exception\/StreamWriteException.html"," < RuntimeException","Indicates that an error occured while attempting to",1],["ReadableReactStream","Recoil\\Stream","Recoil\/Stream\/ReadableReactStream.html","","Exposes a React readable stream as a Recoil readable",1],["ReadableStream","Recoil\\Stream","Recoil\/Stream\/ReadableStream.html","","A readable stream that operates directly on a native",1],["ReadableStreamInterface","Recoil\\Stream","Recoil\/Stream\/ReadableStreamInterface.html","","Interface and specification for coroutine based readable",1],["WritableReactStream","Recoil\\Stream","Recoil\/Stream\/WritableReactStream.html","","Exposes a React writable stream as a Recoil writable",1],["WritableStream","Recoil\\Stream","Recoil\/Stream\/WritableStream.html","","A writable stream that operates directly on a native",1],["WritableStreamInterface","Recoil\\Stream","Recoil\/Stream\/WritableStreamInterface.html","","Interface and specification for coroutine based writable",1],["BidirectionalChannelAdaptor::__construct","Recoil\\Channel\\BidirectionalChannelAdaptor","Recoil\/Channel\/BidirectionalChannelAdaptor.html#method___construct","(<a href=\"Recoil\/Channel\/ReadableChannelInterface.html\"><abbr title=\"Recoil\\Channel\\ReadableChannelInterface\">ReadableChannelInterface<\/abbr><\/a> $readChannel, <a href=\"Recoil\/Channel\/WritableChannelInterface.html\"><abbr title=\"Recoil\\Channel\\WritableChannelInterface\">WritableChannelInterface<\/abbr><\/a> $writeChannel)","",2],["BidirectionalChannelAdaptor::read","Recoil\\Channel\\BidirectionalChannelAdaptor","Recoil\/Channel\/BidirectionalChannelAdaptor.html#method_read","()","[COROUTINE] Read a value from this channel.",2],["BidirectionalChannelAdaptor::write","Recoil\\Channel\\BidirectionalChannelAdaptor","Recoil\/Channel\/BidirectionalChannelAdaptor.html#method_write","(mixed $value)","[COROUTINE] Write a value to this channel.",2],["BidirectionalChannelAdaptor::close","Recoil\\Channel\\BidirectionalChannelAdaptor","Recoil\/Channel\/BidirectionalChannelAdaptor.html#method_close","()","[COROUTINE] Close this channel.",2],["BidirectionalChannelAdaptor::isClosed","Recoil\\Channel\\BidirectionalChannelAdaptor","Recoil\/Channel\/BidirectionalChannelAdaptor.html#method_isClosed","()","Check if this channel is closed.",2],["Channel::__construct","Recoil\\Channel\\Channel","Recoil\/Channel\/Channel.html#method___construct","()","",2],["Channel::read","Recoil\\Channel\\Channel","Recoil\/Channel\/Channel.html#method_read","()","[COROUTINE] Read a value from this channel.",2],["Channel::write","Recoil\\Channel\\Channel","Recoil\/Channel\/Channel.html#method_write","(mixed $value)","[COROUTINE] Write a value to this channel.",2],["Channel::close","Recoil\\Channel\\Channel","Recoil\/Channel\/Channel.html#method_close","()","[COROUTINE] Close this channel.",2],["Channel::isClosed","Recoil\\Channel\\Channel","Recoil\/Channel\/Channel.html#method_isClosed","()","Check if this channel is closed.",2],["ChannelClosedException::__construct","Recoil\\Channel\\Exception\\ChannelClosedException","Recoil\/Channel\/Exception\/ChannelClosedException.html#method___construct","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["ChannelLockedException::__construct","Recoil\\Channel\\Exception\\ChannelLockedException","Recoil\/Channel\/Exception\/ChannelLockedException.html#method___construct","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["ReadableChannelInterface::read","Recoil\\Channel\\ReadableChannelInterface","Recoil\/Channel\/ReadableChannelInterface.html#method_read","()","[COROUTINE] Read a value from this channel.",2],["ReadableChannelInterface::close","Recoil\\Channel\\ReadableChannelInterface","Recoil\/Channel\/ReadableChannelInterface.html#method_close","()","[COROUTINE] Close this channel.",2],["ReadableChannelInterface::isClosed","Recoil\\Channel\\ReadableChannelInterface","Recoil\/Channel\/ReadableChannelInterface.html#method_isClosed","()","Check if this channel is closed.",2],["ReadableStreamChannel::__construct","Recoil\\Channel\\ReadableStreamChannel","Recoil\/Channel\/ReadableStreamChannel.html#method___construct","(<a href=\"Recoil\/Stream\/ReadableStreamInterface.html\"><abbr title=\"Recoil\\Stream\\ReadableStreamInterface\">ReadableStreamInterface<\/abbr><\/a> $stream, <a href=\"Recoil\/Channel\/Serialization\/UnserializerInterface.html\"><abbr title=\"Recoil\\Channel\\Serialization\\UnserializerInterface\">UnserializerInterface<\/abbr><\/a> $unserializer = null, integer $bufferSize = 8192)","",2],["ReadableStreamChannel::read","Recoil\\Channel\\ReadableStreamChannel","Recoil\/Channel\/ReadableStreamChannel.html#method_read","()","[COROUTINE] Read a value from this channel.",2],["ReadableStreamChannel::close","Recoil\\Channel\\ReadableStreamChannel","Recoil\/Channel\/ReadableStreamChannel.html#method_close","()","[COROUTINE] Close this channel.",2],["ReadableStreamChannel::isClosed","Recoil\\Channel\\ReadableStreamChannel","Recoil\/Channel\/ReadableStreamChannel.html#method_isClosed","()","Check if this channel is closed.",2],["PhpSerializer::serialize","Recoil\\Channel\\Serialization\\PhpSerializer","Recoil\/Channel\/Serialization\/PhpSerializer.html#method_serialize","(mixed $value)","Serialize a value to a string.",2],["PhpUnserializer::__construct","Recoil\\Channel\\Serialization\\PhpUnserializer","Recoil\/Channel\/Serialization\/PhpUnserializer.html#method___construct","()","",2],["PhpUnserializer::feed","Recoil\\Channel\\Serialization\\PhpUnserializer","Recoil\/Channel\/Serialization\/PhpUnserializer.html#method_feed","(string $buffer)","Parse data received from the stream.",2],["PhpUnserializer::hasValue","Recoil\\Channel\\Serialization\\PhpUnserializer","Recoil\/Channel\/Serialization\/PhpUnserializer.html#method_hasValue","()","Check if enough data has been received to parse a full",2],["PhpUnserializer::unserialize","Recoil\\Channel\\Serialization\\PhpUnserializer","Recoil\/Channel\/Serialization\/PhpUnserializer.html#method_unserialize","()","Unserialize the next value.",2],["PhpUnserializer::finalize","Recoil\\Channel\\Serialization\\PhpUnserializer","Recoil\/Channel\/Serialization\/PhpUnserializer.html#method_finalize","()","Finalize the unserialization process.",2],["SerializerInterface::serialize","Recoil\\Channel\\Serialization\\SerializerInterface","Recoil\/Channel\/Serialization\/SerializerInterface.html#method_serialize","(mixed $value)","Serialize a value to a string.",2],["UnserializerInterface::feed","Recoil\\Channel\\Serialization\\UnserializerInterface","Recoil\/Channel\/Serialization\/UnserializerInterface.html#method_feed","(string $buffer)","Parse data received from the stream.",2],["UnserializerInterface::hasValue","Recoil\\Channel\\Serialization\\UnserializerInterface","Recoil\/Channel\/Serialization\/UnserializerInterface.html#method_hasValue","()","Check if enough data has been received to parse a full",2],["UnserializerInterface::unserialize","Recoil\\Channel\\Serialization\\UnserializerInterface","Recoil\/Channel\/Serialization\/UnserializerInterface.html#method_unserialize","()","Unserialize the next value.",2],["UnserializerInterface::finalize","Recoil\\Channel\\Serialization\\UnserializerInterface","Recoil\/Channel\/Serialization\/UnserializerInterface.html#method_finalize","()","Finalize the unserialization process.",2],["WritableChannelInterface::write","Recoil\\Channel\\WritableChannelInterface","Recoil\/Channel\/WritableChannelInterface.html#method_write","(mixed $value)","[COROUTINE] Write a value to this channel.",2],["WritableChannelInterface::close","Recoil\\Channel\\WritableChannelInterface","Recoil\/Channel\/WritableChannelInterface.html#method_close","()","[COROUTINE] Close this channel.",2],["WritableChannelInterface::isClosed","Recoil\\Channel\\WritableChannelInterface","Recoil\/Channel\/WritableChannelInterface.html#method_isClosed","()","Check if this channel is closed.",2],["WritableStreamChannel::__construct","Recoil\\Channel\\WritableStreamChannel","Recoil\/Channel\/WritableStreamChannel.html#method___construct","(<a href=\"Recoil\/Stream\/WritableStreamInterface.html\"><abbr title=\"Recoil\\Stream\\WritableStreamInterface\">WritableStreamInterface<\/abbr><\/a> $stream, <a href=\"Recoil\/Channel\/Serialization\/SerializerInterface.html\"><abbr title=\"Recoil\\Channel\\Serialization\\SerializerInterface\">SerializerInterface<\/abbr><\/a> $serializer = null)","",2],["WritableStreamChannel::write","Recoil\\Channel\\WritableStreamChannel","Recoil\/Channel\/WritableStreamChannel.html#method_write","(mixed $value)","[COROUTINE] Write a value to this channel.",2],["WritableStreamChannel::close","Recoil\\Channel\\WritableStreamChannel","Recoil\/Channel\/WritableStreamChannel.html#method_close","()","[COROUTINE] Close this channel.",2],["WritableStreamChannel::isClosed","Recoil\\Channel\\WritableStreamChannel","Recoil\/Channel\/WritableStreamChannel.html#method_isClosed","()","Check if this channel is closed.",2],["CoroutineAdaptor::adapt","Recoil\\Coroutine\\CoroutineAdaptor","Recoil\/Coroutine\/CoroutineAdaptor.html#method_adapt","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, mixed $value)","Adapt a value into a coroutine.",2],["CoroutineAdaptorInterface::adapt","Recoil\\Coroutine\\CoroutineAdaptorInterface","Recoil\/Coroutine\/CoroutineAdaptorInterface.html#method_adapt","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, mixed $value)","Adapt a value into a coroutine.",2],["CoroutineInterface::call","Recoil\\Coroutine\\CoroutineInterface","Recoil\/Coroutine\/CoroutineInterface.html#method_call","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Start the coroutine.",2],["CoroutineInterface::resumeWithValue","Recoil\\Coroutine\\CoroutineInterface","Recoil\/Coroutine\/CoroutineInterface.html#method_resumeWithValue","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, mixed $value)","Resume execution of a suspended coroutine by passing",2],["CoroutineInterface::resumeWithException","Recoil\\Coroutine\\CoroutineInterface","Recoil\/Coroutine\/CoroutineInterface.html#method_resumeWithException","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Resume execution of a suspended coroutine by passing",2],["CoroutineInterface::terminate","Recoil\\Coroutine\\CoroutineInterface","Recoil\/Coroutine\/CoroutineInterface.html#method_terminate","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Inform the coroutine that the executing strand is being",2],["CoroutineInterface::finalize","Recoil\\Coroutine\\CoroutineInterface","Recoil\/Coroutine\/CoroutineInterface.html#method_finalize","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Finalize the coroutine.",2],["CoroutineProviderInterface::coroutine","Recoil\\Coroutine\\CoroutineProviderInterface","Recoil\/Coroutine\/CoroutineProviderInterface.html#method_coroutine","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Produce a coroutine.",2],["PromiseRejectedException::__construct","Recoil\\Coroutine\\Exception\\PromiseRejectedException","Recoil\/Coroutine\/Exception\/PromiseRejectedException.html#method___construct","(mixed $reason)","",2],["PromiseRejectedException::reason","Recoil\\Coroutine\\Exception\\PromiseRejectedException","Recoil\/Coroutine\/Exception\/PromiseRejectedException.html#method_reason","()","Fetch the rejection reason.",2],["GeneratorCoroutine::__construct","Recoil\\Coroutine\\GeneratorCoroutine","Recoil\/Coroutine\/GeneratorCoroutine.html#method___construct","(<a href=\"http:\/\/php.net\/Generator\"><abbr title=\"Generator\">Generator<\/abbr><\/a> $generator)","",2],["GeneratorCoroutine::call","Recoil\\Coroutine\\GeneratorCoroutine","Recoil\/Coroutine\/GeneratorCoroutine.html#method_call","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Invoked when tick() is called for the first time.",2],["GeneratorCoroutine::resumeWithValue","Recoil\\Coroutine\\GeneratorCoroutine","Recoil\/Coroutine\/GeneratorCoroutine.html#method_resumeWithValue","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, mixed $value)","Invoked when tick() is called after sendOnNextTick().",2],["GeneratorCoroutine::resumeWithException","Recoil\\Coroutine\\GeneratorCoroutine","Recoil\/Coroutine\/GeneratorCoroutine.html#method_resumeWithException","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Resume execution of a suspended coroutine by passing",2],["GeneratorCoroutine::finalize","Recoil\\Coroutine\\GeneratorCoroutine","Recoil\/Coroutine\/GeneratorCoroutine.html#method_finalize","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Finalize the coroutine.",2],["GeneratorCoroutine::registerFinalizeCallback","Recoil\\Coroutine\\GeneratorCoroutine","Recoil\/Coroutine\/GeneratorCoroutine.html#method_registerFinalizeCallback","(<abbr title=\"Recoil\\Coroutine\\callable\">callable<\/abbr> $callback)","Register a callback to be invoked when the coroutine",2],["PromiseCoroutine::__construct","Recoil\\Coroutine\\PromiseCoroutine","Recoil\/Coroutine\/PromiseCoroutine.html#method___construct","(<abbr title=\"React\\Promise\\PromiseInterface\">PromiseInterface<\/abbr> $promise)","",2],["PromiseCoroutine::call","Recoil\\Coroutine\\PromiseCoroutine","Recoil\/Coroutine\/PromiseCoroutine.html#method_call","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Start the coroutine.",2],["PromiseCoroutine::terminate","Recoil\\Coroutine\\PromiseCoroutine","Recoil\/Coroutine\/PromiseCoroutine.html#method_terminate","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Inform the coroutine that the executing strand is being",2],["PromiseCoroutine::finalize","Recoil\\Coroutine\\PromiseCoroutine","Recoil\/Coroutine\/PromiseCoroutine.html#method_finalize","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Finalize the coroutine.",2],["KernelApi::strand","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_strand","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Get the strand the coroutine is executing on.",2],["KernelApi::kernel","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_kernel","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Get the coroutine kernel that the current strand is",2],["KernelApi::eventLoop","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_eventLoop","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Get the React event-loop that the coroutine kernel",2],["KernelApi::return_","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_return_","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, mixed $value = null)","Return a value to the calling coroutine.",2],["KernelApi::throw_","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_throw_","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Throw an exception to the calling coroutine.",2],["KernelApi::finally_","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_finally_","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, <abbr title=\"Recoil\\Kernel\\Api\\callable\">callable<\/abbr> $callback)","Register a callback to be invoked when the current",2],["KernelApi::terminate","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_terminate","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Terminate execution of the strand.",2],["KernelApi::sleep","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_sleep","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, <abbr title=\"Recoil\\Kernel\\Api\\number\">number<\/abbr> $timeout)","Suspend execution for a specified period of time.",2],["KernelApi::suspend","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_suspend","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, <abbr title=\"Recoil\\Kernel\\Api\\callable\">callable<\/abbr> $callback)","Suspend execution of the strand.",2],["KernelApi::timeout","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_timeout","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, <abbr title=\"Recoil\\Kernel\\Api\\number\">number<\/abbr> $timeout, mixed $coroutine)","Execute a coroutine with a time limit.",2],["KernelApi::all","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_all","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, array $coroutines)","Execute the given coroutines concurrently.",2],["KernelApi::cooperate","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_cooperate","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Suspend the strand until the next tick.",2],["KernelApi::noop","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_noop","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Resume the strand immediately.",2],["KernelApi::execute","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_execute","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, mixed $coroutine)","Execute a coroutine on its own strand.",2],["KernelApi::select","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_select","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, array $strands)","Wait for one or more of the given strands to exit.",2],["KernelApi::stop","Recoil\\Kernel\\Api\\KernelApi","Recoil\/Kernel\/Api\/KernelApi.html#method_stop","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, boolean $stopEventLoop = true)","Stop the coroutine kernel \/ event-loop.",2],["KernelApiCall::__construct","Recoil\\Kernel\\Api\\KernelApiCall","Recoil\/Kernel\/Api\/KernelApiCall.html#method___construct","(string $name, array $arguments)","",2],["KernelApiCall::name","Recoil\\Kernel\\Api\\KernelApiCall","Recoil\/Kernel\/Api\/KernelApiCall.html#method_name","()","Fetch the name of the kernel API function to invoke.",2],["KernelApiCall::arguments","Recoil\\Kernel\\Api\\KernelApiCall","Recoil\/Kernel\/Api\/KernelApiCall.html#method_arguments","()","Fetch the arguments to the kernel API function.",2],["KernelApiCall::call","Recoil\\Kernel\\Api\\KernelApiCall","Recoil\/Kernel\/Api\/KernelApiCall.html#method_call","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Start the coroutine.",2],["KernelApiInterface::strand","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_strand","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Get the strand the coroutine is executing on.",2],["KernelApiInterface::kernel","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_kernel","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Get the coroutine kernel that the current strand is",2],["KernelApiInterface::eventLoop","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_eventLoop","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Get the React event-loop that the coroutine kernel",2],["KernelApiInterface::return_","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_return_","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, mixed $value = null)","Return a value to the calling coroutine.",2],["KernelApiInterface::throw_","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_throw_","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Throw an exception to the calling coroutine.",2],["KernelApiInterface::finally_","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_finally_","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, <abbr title=\"Recoil\\Kernel\\Api\\callable\">callable<\/abbr> $callback)","Register a callback to be invoked when the current",2],["KernelApiInterface::terminate","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_terminate","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Terminate execution of the strand.",2],["KernelApiInterface::sleep","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_sleep","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, <abbr title=\"Recoil\\Kernel\\Api\\number\">number<\/abbr> $timeout)","Suspend execution for a specified period of time.",2],["KernelApiInterface::suspend","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_suspend","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, <abbr title=\"Recoil\\Kernel\\Api\\callable\">callable<\/abbr> $callback)","Suspend execution of the strand until it is resumed",2],["KernelApiInterface::timeout","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_timeout","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, <abbr title=\"Recoil\\Kernel\\Api\\number\">number<\/abbr> $timeout, mixed $coroutine)","Execute a coroutine with a time limit.",2],["KernelApiInterface::all","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_all","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, array $coroutines)","Execute the given coroutines concurrently.",2],["KernelApiInterface::noop","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_noop","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Resume the strand immediately.",2],["KernelApiInterface::cooperate","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_cooperate","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Suspend the strand until the next tick.",2],["KernelApiInterface::execute","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_execute","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, mixed $coroutine)","Execute a coroutine on its own strand.",2],["KernelApiInterface::select","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_select","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, array $strands)","Wait for one or more of the given strands to exit.",2],["KernelApiInterface::stop","Recoil\\Kernel\\Api\\KernelApiInterface","Recoil\/Kernel\/Api\/KernelApiInterface.html#method_stop","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, boolean $stopEventLoop = true)","Stop the coroutine kernel \/ event-loop.",2],["Select::__construct","Recoil\\Kernel\\Api\\Select","Recoil\/Kernel\/Api\/Select.html#method___construct","(array $strands)","",2],["Select::call","Recoil\\Kernel\\Api\\Select","Recoil\/Kernel\/Api\/Select.html#method_call","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Start the coroutine.",2],["Select::finalize","Recoil\\Kernel\\Api\\Select","Recoil\/Kernel\/Api\/Select.html#method_finalize","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Finalize the coroutine.",2],["Select::onStrandExit","Recoil\\Kernel\\Api\\Select","Recoil\/Kernel\/Api\/Select.html#method_onStrandExit","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","",2],["Sleep::__construct","Recoil\\Kernel\\Api\\Sleep","Recoil\/Kernel\/Api\/Sleep.html#method___construct","($timeout)","",2],["Sleep::call","Recoil\\Kernel\\Api\\Sleep","Recoil\/Kernel\/Api\/Sleep.html#method_call","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Invoked when tick() is called for the first time.",2],["Sleep::finalize","Recoil\\Kernel\\Api\\Sleep","Recoil\/Kernel\/Api\/Sleep.html#method_finalize","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Finalize the coroutine.",2],["Timeout::__construct","Recoil\\Kernel\\Api\\Timeout","Recoil\/Kernel\/Api\/Timeout.html#method___construct","($timeout, $coroutine)","",2],["Timeout::call","Recoil\\Kernel\\Api\\Timeout","Recoil\/Kernel\/Api\/Timeout.html#method_call","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Invoked when tick() is called for the first time.",2],["Timeout::terminate","Recoil\\Kernel\\Api\\Timeout","Recoil\/Kernel\/Api\/Timeout.html#method_terminate","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Inform the coroutine that the executing strand is being",2],["Timeout::finalize","Recoil\\Kernel\\Api\\Timeout","Recoil\/Kernel\/Api\/Timeout.html#method_finalize","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Finalize the coroutine.",2],["WaitAll::__construct","Recoil\\Kernel\\Api\\WaitAll","Recoil\/Kernel\/Api\/WaitAll.html#method___construct","(array $coroutines)","",2],["WaitAll::call","Recoil\\Kernel\\Api\\WaitAll","Recoil\/Kernel\/Api\/WaitAll.html#method_call","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Start the coroutine.",2],["WaitAll::finalize","Recoil\\Kernel\\Api\\WaitAll","Recoil\/Kernel\/Api\/WaitAll.html#method_finalize","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Finalize the coroutine.",2],["StrandTerminatedException::__construct","Recoil\\Kernel\\Exception\\StrandTerminatedException","Recoil\/Kernel\/Exception\/StrandTerminatedException.html#method___construct","()","",2],["TimeoutException::__construct","Recoil\\Kernel\\Exception\\TimeoutException","Recoil\/Kernel\/Exception\/TimeoutException.html#method___construct","()","",2],["Kernel::__construct","Recoil\\Kernel\\Kernel","Recoil\/Kernel\/Kernel.html#method___construct","(<abbr title=\"React\\EventLoop\\LoopInterface\">LoopInterface<\/abbr> $eventLoop = null, <a href=\"Recoil\/Kernel\/Api\/KernelApiInterface.html\"><abbr title=\"Recoil\\Kernel\\Api\\KernelApiInterface\">KernelApiInterface<\/abbr><\/a> $api = null, <a href=\"Recoil\/Coroutine\/CoroutineAdaptorInterface.html\"><abbr title=\"Recoil\\Coroutine\\CoroutineAdaptorInterface\">CoroutineAdaptorInterface<\/abbr><\/a> $coroutineAdaptor = null, <a href=\"Recoil\/Kernel\/Strand\/StrandFactoryInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandFactoryInterface\">StrandFactoryInterface<\/abbr><\/a> $strandFactory = null)","",2],["Kernel::execute","Recoil\\Kernel\\Kernel","Recoil\/Kernel\/Kernel.html#method_execute","(mixed $coroutine)","Execute a coroutine in a new strand of execution.",2],["Kernel::attachStrand","Recoil\\Kernel\\Kernel","Recoil\/Kernel\/Kernel.html#method_attachStrand","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Attach an existing strand to this kernel.",2],["Kernel::detachStrand","Recoil\\Kernel\\Kernel","Recoil\/Kernel\/Kernel.html#method_detachStrand","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Detach an existing strand from this kernel.",2],["Kernel::api","Recoil\\Kernel\\Kernel","Recoil\/Kernel\/Kernel.html#method_api","()","Fetch the object that implements the kernel API.",2],["Kernel::coroutineAdaptor","Recoil\\Kernel\\Kernel","Recoil\/Kernel\/Kernel.html#method_coroutineAdaptor","()","Fetch the object used to adapt values into coroutines.",2],["Kernel::strandFactory","Recoil\\Kernel\\Kernel","Recoil\/Kernel\/Kernel.html#method_strandFactory","()","Fetch the factory used to create new strands.",2],["Kernel::eventLoop","Recoil\\Kernel\\Kernel","Recoil\/Kernel\/Kernel.html#method_eventLoop","()","Fetch the React event-loop.",2],["Kernel::stop","Recoil\\Kernel\\Kernel","Recoil\/Kernel\/Kernel.html#method_stop","(boolean $stopEventLoop = true)","Terminate all strands and stop execution.",2],["Kernel::onTick","Recoil\\Kernel\\Kernel","Recoil\/Kernel\/Kernel.html#method_onTick","()","Step each of the strands attached to this kernel.",2],["KernelInterface::execute","Recoil\\Kernel\\KernelInterface","Recoil\/Kernel\/KernelInterface.html#method_execute","(mixed $coroutine)","Execute a coroutine in a new strand of execution.",2],["KernelInterface::attachStrand","Recoil\\Kernel\\KernelInterface","Recoil\/Kernel\/KernelInterface.html#method_attachStrand","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Attach an existing strand to this kernel.",2],["KernelInterface::detachStrand","Recoil\\Kernel\\KernelInterface","Recoil\/Kernel\/KernelInterface.html#method_detachStrand","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Detach an existing strand from this kernel.",2],["KernelInterface::api","Recoil\\Kernel\\KernelInterface","Recoil\/Kernel\/KernelInterface.html#method_api","()","Fetch the object that implements the kernel API.",2],["KernelInterface::coroutineAdaptor","Recoil\\Kernel\\KernelInterface","Recoil\/Kernel\/KernelInterface.html#method_coroutineAdaptor","()","Fetch the object used to adapt values into coroutines.",2],["KernelInterface::strandFactory","Recoil\\Kernel\\KernelInterface","Recoil\/Kernel\/KernelInterface.html#method_strandFactory","()","Fetch the factory used to create new strands.",2],["KernelInterface::eventLoop","Recoil\\Kernel\\KernelInterface","Recoil\/Kernel\/KernelInterface.html#method_eventLoop","()","Fetch the React event-loop.",2],["KernelInterface::stop","Recoil\\Kernel\\KernelInterface","Recoil\/Kernel\/KernelInterface.html#method_stop","(boolean $stopEventLoop = true)","Terminate all strands and stop execution.",2],["StackBase::call","Recoil\\Kernel\\Strand\\StackBase","Recoil\/Kernel\/Strand\/StackBase.html#method_call","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Start the coroutine.",2],["StackBase::resumeWithValue","Recoil\\Kernel\\Strand\\StackBase","Recoil\/Kernel\/Strand\/StackBase.html#method_resumeWithValue","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, mixed $value)","Resume execution of a suspended coroutine by passing",2],["StackBase::resumeWithException","Recoil\\Kernel\\Strand\\StackBase","Recoil\/Kernel\/Strand\/StackBase.html#method_resumeWithException","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Resume execution of a suspended coroutine by passing",2],["StackBase::terminate","Recoil\\Kernel\\Strand\\StackBase","Recoil\/Kernel\/Strand\/StackBase.html#method_terminate","(<a href=\"Recoil\/Kernel\/Strand\/StrandInterface.html\"><abbr title=\"Recoil\\Kernel\\Strand\\StrandInterface\">StrandInterface<\/abbr><\/a> $strand)","Inform the coroutine that the executing strand is being",2],["Strand::__construct","Recoil\\Kernel\\Strand\\Strand","Recoil\/Kernel\/Strand\/Strand.html#method___construct","(<a href=\"Recoil\/Kernel\/KernelInterface.html\"><abbr title=\"Recoil\\Kernel\\KernelInterface\">KernelInterface<\/abbr><\/a> $kernel)","",2],["Strand::kernel","Recoil\\Kernel\\Strand\\Strand","Recoil\/Kernel\/Strand\/Strand.html#method_kernel","()","Fetch the kernel on which this strand is executing.",2],["Strand::current","Recoil\\Kernel\\Strand\\Strand","Recoil\/Kernel\/Strand\/Strand.html#method_current","()","Fetch the coroutine currently being executed.",2],["Strand::push","Recoil\\Kernel\\Strand\\Strand","Recoil\/Kernel\/Strand\/Strand.html#method_push","(mixed $coroutine)","Push a coroutine onto the stack.",2],["Strand::pop","Recoil\\Kernel\\Strand\\Strand","Recoil\/Kernel\/Strand\/Strand.html#method_pop","()","Pop the current coroutine off the stack.",2],["Strand::call","Recoil\\Kernel\\Strand\\Strand","Recoil\/Kernel\/Strand\/Strand.html#method_call","(mixed $coroutine)","Call the given coroutine immediately.",2],["Strand::returnValue","Recoil\\Kernel\\Strand\\Strand","Recoil\/Kernel\/Strand\/Strand.html#method_returnValue","(mixed $value = null)","Return a value to calling coroutine.",2],["Strand::throwException","Recoil\\Kernel\\Strand\\Strand","Recoil\/Kernel\/Strand\/Strand.html#method_throwException","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Throw an exception to the calling coroutine.",2],["Strand::suspend","Recoil\\Kernel\\Strand\\Strand","Recoil\/Kernel\/Strand\/Strand.html#method_suspend","()","Suspend execution of this strand.",2],["Strand::resumeWithValue","Recoil\\Kernel\\Strand\\Strand","Recoil\/Kernel\/Strand\/Strand.html#method_resumeWithValue","(mixed $value)","Resume execution of this strand and send a value to",2],["Strand::resumeWithException","Recoil\\Kernel\\Strand\\Strand","Recoil\/Kernel\/Strand\/Strand.html#method_resumeWithException","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Resume execution of this strand and throw an exception",2],["Strand::terminate","Recoil\\Kernel\\Strand\\Strand","Recoil\/Kernel\/Strand\/Strand.html#method_terminate","()","Terminate this execution context.",2],["Strand::hasExited","Recoil\\Kernel\\Strand\\Strand","Recoil\/Kernel\/Strand\/Strand.html#method_hasExited","()","Check if the strand has exited.",2],["Strand::tick","Recoil\\Kernel\\Strand\\Strand","Recoil\/Kernel\/Strand\/Strand.html#method_tick","()","Perform the next unit-of-work for this strand.",2],["StrandFactory::createStrand","Recoil\\Kernel\\Strand\\StrandFactory","Recoil\/Kernel\/Strand\/StrandFactory.html#method_createStrand","(<a href=\"Recoil\/Kernel\/KernelInterface.html\"><abbr title=\"Recoil\\Kernel\\KernelInterface\">KernelInterface<\/abbr><\/a> $kernel)","Create a strand.",2],["StrandFactoryInterface::createStrand","Recoil\\Kernel\\Strand\\StrandFactoryInterface","Recoil\/Kernel\/Strand\/StrandFactoryInterface.html#method_createStrand","(<a href=\"Recoil\/Kernel\/KernelInterface.html\"><abbr title=\"Recoil\\Kernel\\KernelInterface\">KernelInterface<\/abbr><\/a> $kernel)","Create a strand.",2],["StrandInterface::kernel","Recoil\\Kernel\\Strand\\StrandInterface","Recoil\/Kernel\/Strand\/StrandInterface.html#method_kernel","()","Fetch the kernel on which this strand is executing.",2],["StrandInterface::current","Recoil\\Kernel\\Strand\\StrandInterface","Recoil\/Kernel\/Strand\/StrandInterface.html#method_current","()","Fetch the coroutine this strand is currently executing.",2],["StrandInterface::push","Recoil\\Kernel\\Strand\\StrandInterface","Recoil\/Kernel\/Strand\/StrandInterface.html#method_push","(mixed $coroutine)","Push a coroutine onto the stack.",2],["StrandInterface::pop","Recoil\\Kernel\\Strand\\StrandInterface","Recoil\/Kernel\/Strand\/StrandInterface.html#method_pop","()","Pop the current coroutine off the stack.",2],["StrandInterface::call","Recoil\\Kernel\\Strand\\StrandInterface","Recoil\/Kernel\/Strand\/StrandInterface.html#method_call","(mixed $coroutine)","Call the given coroutine.",2],["StrandInterface::returnValue","Recoil\\Kernel\\Strand\\StrandInterface","Recoil\/Kernel\/Strand\/StrandInterface.html#method_returnValue","(mixed $value = null)","Return a value to the calling coroutine.",2],["StrandInterface::throwException","Recoil\\Kernel\\Strand\\StrandInterface","Recoil\/Kernel\/Strand\/StrandInterface.html#method_throwException","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Throw an exception to the calling coroutine.",2],["StrandInterface::suspend","Recoil\\Kernel\\Strand\\StrandInterface","Recoil\/Kernel\/Strand\/StrandInterface.html#method_suspend","()","Suspend execution of this strand.",2],["StrandInterface::resumeWithValue","Recoil\\Kernel\\Strand\\StrandInterface","Recoil\/Kernel\/Strand\/StrandInterface.html#method_resumeWithValue","(mixed $value)","Resume execution of this strand and send a value to",2],["StrandInterface::resumeWithException","Recoil\\Kernel\\Strand\\StrandInterface","Recoil\/Kernel\/Strand\/StrandInterface.html#method_resumeWithException","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","Resume execution of this strand and throw an exception",2],["StrandInterface::terminate","Recoil\\Kernel\\Strand\\StrandInterface","Recoil\/Kernel\/Strand\/StrandInterface.html#method_terminate","()","Terminate execution of this strand.",2],["StrandInterface::hasExited","Recoil\\Kernel\\Strand\\StrandInterface","Recoil\/Kernel\/Strand\/StrandInterface.html#method_hasExited","()","Check if the strand has exited.",2],["StrandInterface::tick","Recoil\\Kernel\\Strand\\StrandInterface","Recoil\/Kernel\/Strand\/StrandInterface.html#method_tick","()","Perform the next unit-of-work for this strand.",2],["Recoil::__callStatic","Recoil\\Recoil","Recoil\/Recoil.html#method___callStatic","(string $name, array $arguments)","[COROUTINE] Invoke a kernel API function.",2],["Recoil::run","Recoil\\Recoil","Recoil\/Recoil.html#method_run","(<abbr title=\"Recoil\\callable\">callable<\/abbr> $entryPoint, <abbr title=\"React\\EventLoop\\LoopInterface\">LoopInterface<\/abbr> $eventLoop = null)","Create and run a new coroutine kernel.",2],["Recoil::strand","Recoil\\Recoil","Recoil\/Recoil.html#method_strand","()","[COROUTINE] Get the strand the coroutine is executing",2],["Recoil::kernel","Recoil\\Recoil","Recoil\/Recoil.html#method_kernel","()","[COROUTINE] Get the coroutine kernel that the current",2],["Recoil::eventLoop","Recoil\\Recoil","Recoil\/Recoil.html#method_eventLoop","()","[COROUTINE] Get the React event-loop that the coroutine",2],["Recoil::return_","Recoil\\Recoil","Recoil\/Recoil.html#method_return_","($value)","[COROUTINE] Return a value to the calling coroutine.",2],["Recoil::throw_","Recoil\\Recoil","Recoil\/Recoil.html#method_throw_","(<abbr title=\"Exception \">Exception <\/abbr> $exception)","[COROUTINE] Throw an exception to the calling coroutine.",2],["Recoil::finally_","Recoil\\Recoil","Recoil\/Recoil.html#method_finally_","(<abbr title=\"callable \">callable <\/abbr> $callback)","[COROUTINE] Register a callback to be invoked when",2],["Recoil::terminate","Recoil\\Recoil","Recoil\/Recoil.html#method_terminate","()","[COROUTINE] Terminate execution of this strand.",2],["Recoil::sleep","Recoil\\Recoil","Recoil\/Recoil.html#method_sleep","(<abbr title=\"float \">float <\/abbr> $timeout)","[COROUTINE] Suspend execution for a specified period",2],["Recoil::suspend","Recoil\\Recoil","Recoil\/Recoil.html#method_suspend","(<abbr title=\"callable \">callable <\/abbr> $callback)","[COROUTINE] Suspend execution of the strand until it",2],["Recoil::timeout","Recoil\\Recoil","Recoil\/Recoil.html#method_timeout","(<abbr title=\"float \">float <\/abbr> $timeout, $coroutine)","[COROUTINE] Execute a coroutine with a time limit.",2],["Recoil::all","Recoil\\Recoil","Recoil\/Recoil.html#method_all","(<abbr title=\"array \">array <\/abbr> $coroutines)","[COROUTINE] Execute the given coroutines concurrently.",2],["Recoil::noop","Recoil\\Recoil","Recoil\/Recoil.html#method_noop","()","[COROUTINE] Resume the strand immediately.",2],["Recoil::cooperate","Recoil\\Recoil","Recoil\/Recoil.html#method_cooperate","()","[COROUTINE] Suspend the strand until the next tick.",2],["Recoil::execute","Recoil\\Recoil","Recoil\/Recoil.html#method_execute","($coroutine)","[COROUTINE] Execute a coroutine on its own strand.",2],["Recoil::select","Recoil\\Recoil","Recoil\/Recoil.html#method_select","(<abbr title=\"StrandInterface \">StrandInterface <\/abbr> $strand, <abbr title=\"array \">array <\/abbr> $strands)","[COROUTINE] Wait for one or more of the given strands",2],["Recoil::stop","Recoil\\Recoil","Recoil\/Recoil.html#method_stop","(<abbr title=\"bool \">bool <\/abbr> $stopEventLoop = true)","[COROUTINE] Stop the coroutine kernel \/ event-loop.",2],["BidirectionalStreamAdaptor::__construct","Recoil\\Stream\\BidirectionalStreamAdaptor","Recoil\/Stream\/BidirectionalStreamAdaptor.html#method___construct","(<a href=\"Recoil\/Stream\/ReadableStreamInterface.html\"><abbr title=\"Recoil\\Stream\\ReadableStreamInterface\">ReadableStreamInterface<\/abbr><\/a> $readStream, <a href=\"Recoil\/Stream\/WritableStreamInterface.html\"><abbr title=\"Recoil\\Stream\\WritableStreamInterface\">WritableStreamInterface<\/abbr><\/a> $writeStream)","",2],["BidirectionalStreamAdaptor::read","Recoil\\Stream\\BidirectionalStreamAdaptor","Recoil\/Stream\/BidirectionalStreamAdaptor.html#method_read","(integer $length)","[COROUTINE] Read data from the stream.",2],["BidirectionalStreamAdaptor::write","Recoil\\Stream\\BidirectionalStreamAdaptor","Recoil\/Stream\/BidirectionalStreamAdaptor.html#method_write","(string $buffer, integer|null $length = null)","[COROUTINE] Write data to this stream.",2],["BidirectionalStreamAdaptor::writeAll","Recoil\\Stream\\BidirectionalStreamAdaptor","Recoil\/Stream\/BidirectionalStreamAdaptor.html#method_writeAll","($buffer)","[COROUTINE] Write all data from the given buffer to",2],["BidirectionalStreamAdaptor::close","Recoil\\Stream\\BidirectionalStreamAdaptor","Recoil\/Stream\/BidirectionalStreamAdaptor.html#method_close","()","[COROUTINE] Close this stream.",2],["BidirectionalStreamAdaptor::isClosed","Recoil\\Stream\\BidirectionalStreamAdaptor","Recoil\/Stream\/BidirectionalStreamAdaptor.html#method_isClosed","()","Check if this stream is closed.",2],["StreamClosedException::__construct","Recoil\\Stream\\Exception\\StreamClosedException","Recoil\/Stream\/Exception\/StreamClosedException.html#method___construct","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["StreamLockedException::__construct","Recoil\\Stream\\Exception\\StreamLockedException","Recoil\/Stream\/Exception\/StreamLockedException.html#method___construct","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["StreamReadException::__construct","Recoil\\Stream\\Exception\\StreamReadException","Recoil\/Stream\/Exception\/StreamReadException.html#method___construct","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["StreamWriteException::__construct","Recoil\\Stream\\Exception\\StreamWriteException","Recoil\/Stream\/Exception\/StreamWriteException.html#method___construct","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["ReadableReactStream::__construct","Recoil\\Stream\\ReadableReactStream","Recoil\/Stream\/ReadableReactStream.html#method___construct","(<abbr title=\"React\\Stream\\ReadableStreamInterface\">ReadableStreamInterface<\/abbr> $stream)","",2],["ReadableReactStream::read","Recoil\\Stream\\ReadableReactStream","Recoil\/Stream\/ReadableReactStream.html#method_read","(integer $length)","[COROUTINE] Read data from the stream.",2],["ReadableReactStream::close","Recoil\\Stream\\ReadableReactStream","Recoil\/Stream\/ReadableReactStream.html#method_close","()","[COROUTINE] Close this stream.",2],["ReadableReactStream::isClosed","Recoil\\Stream\\ReadableReactStream","Recoil\/Stream\/ReadableReactStream.html#method_isClosed","()","Check if this stream is closed.",2],["ReadableReactStream::onStreamData","Recoil\\Stream\\ReadableReactStream","Recoil\/Stream\/ReadableReactStream.html#method_onStreamData","($data)","",2],["ReadableReactStream::onStreamEnd","Recoil\\Stream\\ReadableReactStream","Recoil\/Stream\/ReadableReactStream.html#method_onStreamEnd","()","",2],["ReadableReactStream::onStreamClose","Recoil\\Stream\\ReadableReactStream","Recoil\/Stream\/ReadableReactStream.html#method_onStreamClose","()","",2],["ReadableReactStream::onStreamError","Recoil\\Stream\\ReadableReactStream","Recoil\/Stream\/ReadableReactStream.html#method_onStreamError","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","",2],["ReadableStream::__construct","Recoil\\Stream\\ReadableStream","Recoil\/Stream\/ReadableStream.html#method___construct","(<abbr title=\"Recoil\\Stream\\resource\">resource<\/abbr> $stream)","",2],["ReadableStream::read","Recoil\\Stream\\ReadableStream","Recoil\/Stream\/ReadableStream.html#method_read","(integer $length)","[COROUTINE] Read data from the stream.",2],["ReadableStream::close","Recoil\\Stream\\ReadableStream","Recoil\/Stream\/ReadableStream.html#method_close","()","[COROUTINE] Close this stream.",2],["ReadableStream::isClosed","Recoil\\Stream\\ReadableStream","Recoil\/Stream\/ReadableStream.html#method_isClosed","()","Check if this stream is closed.",2],["ReadableStreamInterface::read","Recoil\\Stream\\ReadableStreamInterface","Recoil\/Stream\/ReadableStreamInterface.html#method_read","(integer $length)","[COROUTINE] Read data from the stream.",2],["ReadableStreamInterface::close","Recoil\\Stream\\ReadableStreamInterface","Recoil\/Stream\/ReadableStreamInterface.html#method_close","()","[COROUTINE] Close this stream.",2],["ReadableStreamInterface::isClosed","Recoil\\Stream\\ReadableStreamInterface","Recoil\/Stream\/ReadableStreamInterface.html#method_isClosed","()","Check if this stream is closed.",2],["WritableReactStream::__construct","Recoil\\Stream\\WritableReactStream","Recoil\/Stream\/WritableReactStream.html#method___construct","(<abbr title=\"React\\Stream\\WritableStreamInterface\">WritableStreamInterface<\/abbr> $stream)","",2],["WritableReactStream::write","Recoil\\Stream\\WritableReactStream","Recoil\/Stream\/WritableReactStream.html#method_write","(string $buffer, integer|null $length = null)","[COROUTINE] Write data to this stream.",2],["WritableReactStream::writeAll","Recoil\\Stream\\WritableReactStream","Recoil\/Stream\/WritableReactStream.html#method_writeAll","(string $buffer)","[COROUTINE] Write all data from the given buffer to",2],["WritableReactStream::close","Recoil\\Stream\\WritableReactStream","Recoil\/Stream\/WritableReactStream.html#method_close","()","[COROUTINE] Close this stream.",2],["WritableReactStream::isClosed","Recoil\\Stream\\WritableReactStream","Recoil\/Stream\/WritableReactStream.html#method_isClosed","()","Check if this stream is closed.",2],["WritableReactStream::onStreamDrain","Recoil\\Stream\\WritableReactStream","Recoil\/Stream\/WritableReactStream.html#method_onStreamDrain","()","",2],["WritableReactStream::onStreamError","Recoil\\Stream\\WritableReactStream","Recoil\/Stream\/WritableReactStream.html#method_onStreamError","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $exception)","",2],["WritableStream::__construct","Recoil\\Stream\\WritableStream","Recoil\/Stream\/WritableStream.html#method___construct","(<abbr title=\"Recoil\\Stream\\resource\">resource<\/abbr> $stream)","",2],["WritableStream::write","Recoil\\Stream\\WritableStream","Recoil\/Stream\/WritableStream.html#method_write","(string $buffer, integer|null $length = null)","[COROUTINE] Write data to this stream.",2],["WritableStream::writeAll","Recoil\\Stream\\WritableStream","Recoil\/Stream\/WritableStream.html#method_writeAll","(string $buffer)","[COROUTINE] Write all data from the given buffer to",2],["WritableStream::close","Recoil\\Stream\\WritableStream","Recoil\/Stream\/WritableStream.html#method_close","()","[COROUTINE] Close this stream.",2],["WritableStream::isClosed","Recoil\\Stream\\WritableStream","Recoil\/Stream\/WritableStream.html#method_isClosed","()","Check if this stream is closed.",2],["WritableStreamInterface::write","Recoil\\Stream\\WritableStreamInterface","Recoil\/Stream\/WritableStreamInterface.html#method_write","(string $buffer, integer|null $length = null)","[COROUTINE] Write data to this stream.",2],["WritableStreamInterface::writeAll","Recoil\\Stream\\WritableStreamInterface","Recoil\/Stream\/WritableStreamInterface.html#method_writeAll","($buffer)","[COROUTINE] Write all data from the given buffer to",2],["WritableStreamInterface::close","Recoil\\Stream\\WritableStreamInterface","Recoil\/Stream\/WritableStreamInterface.html#method_close","()","[COROUTINE] Close this stream.",2],["WritableStreamInterface::isClosed","Recoil\\Stream\\WritableStreamInterface","Recoil\/Stream\/WritableStreamInterface.html#method_isClosed","()","Check if this stream is closed.",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']